// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: trace.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace scyna.proto {

  /// <summary>Holder for reflection information generated from trace.proto</summary>
  public static partial class TraceReflection {

    #region Descriptor
    /// <summary>File descriptor for trace.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TraceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0cmFjZS5wcm90bxIFc2N5bmEiVgoQTG9nQ3JlYXRlZFNpZ25hbBIMCgRU",
            "aW1lGAEgASgEEgoKAklEGAQgASgEEgsKA1NFURgFIAEoBBIMCgRUZXh0GAMg",
            "ASgJEg0KBUxldmVsGAIgASgNIpEBChJUcmFjZUNyZWF0ZWRTaWduYWwSCgoC",
            "SUQYASABKAQSEAoIUGFyZW50SUQYAiABKAQSDAoEVHlwZRgDIAEoDRIMCgRU",
            "aW1lGAQgASgEEhAKCER1cmF0aW9uGAUgASgEEgwKBFBhdGgYBiABKAkSEQoJ",
            "U2Vzc2lvbklEGAggASgEEg4KBlN0YXR1cxgJIAEoDSJrChJFbmRwb2ludERv",
            "bmVTaWduYWwSDwoHVHJhY2VJRBgBIAEoBBIOCgZTdGF0dXMYAiABKAUSEAoI",
            "UmVzcG9uc2UYAyABKAkSDwoHUmVxdWVzdBgEIAEoCRIRCglTZXNzaW9uSUQY",
            "BSABKARCLwoLc2N5bmEucHJvdG9IAlABWg4uLztzY3luYV9wcm90b6oCC3Nj",
            "eW5hLnByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::scyna.proto.LogCreatedSignal), global::scyna.proto.LogCreatedSignal.Parser, new[]{ "Time", "ID", "SEQ", "Text", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::scyna.proto.TraceCreatedSignal), global::scyna.proto.TraceCreatedSignal.Parser, new[]{ "ID", "ParentID", "Type", "Time", "Duration", "Path", "SessionID", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::scyna.proto.EndpointDoneSignal), global::scyna.proto.EndpointDoneSignal.Parser, new[]{ "TraceID", "Status", "Response", "Request", "SessionID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LogCreatedSignal : pb::IMessage<LogCreatedSignal> {
    private static readonly pb::MessageParser<LogCreatedSignal> _parser = new pb::MessageParser<LogCreatedSignal>(() => new LogCreatedSignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogCreatedSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::scyna.proto.TraceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogCreatedSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogCreatedSignal(LogCreatedSignal other) : this() {
      time_ = other.time_;
      iD_ = other.iD_;
      sEQ_ = other.sEQ_;
      text_ = other.text_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogCreatedSignal Clone() {
      return new LogCreatedSignal(this);
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 1;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 4;
    private ulong iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "SEQ" field.</summary>
    public const int SEQFieldNumber = 5;
    private ulong sEQ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SEQ {
      get { return sEQ_; }
      set {
        sEQ_ = value;
      }
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogCreatedSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogCreatedSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (ID != other.ID) return false;
      if (SEQ != other.SEQ) return false;
      if (Text != other.Text) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (ID != 0UL) hash ^= ID.GetHashCode();
      if (SEQ != 0UL) hash ^= SEQ.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Time);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (ID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ID);
      }
      if (SEQ != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SEQ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (SEQ != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SEQ);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogCreatedSignal other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      if (other.SEQ != 0UL) {
        SEQ = other.SEQ;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadUInt64();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 32: {
            ID = input.ReadUInt64();
            break;
          }
          case 40: {
            SEQ = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceCreatedSignal : pb::IMessage<TraceCreatedSignal> {
    private static readonly pb::MessageParser<TraceCreatedSignal> _parser = new pb::MessageParser<TraceCreatedSignal>(() => new TraceCreatedSignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceCreatedSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::scyna.proto.TraceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceCreatedSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceCreatedSignal(TraceCreatedSignal other) : this() {
      iD_ = other.iD_;
      parentID_ = other.parentID_;
      type_ = other.type_;
      time_ = other.time_;
      duration_ = other.duration_;
      path_ = other.path_;
      sessionID_ = other.sessionID_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceCreatedSignal Clone() {
      return new TraceCreatedSignal(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private ulong iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ParentID" field.</summary>
    public const int ParentIDFieldNumber = 2;
    private ulong parentID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ParentID {
      get { return parentID_; }
      set {
        parentID_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 4;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private ulong duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 6;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SessionID" field.</summary>
    public const int SessionIDFieldNumber = 8;
    private ulong sessionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionID {
      get { return sessionID_; }
      set {
        sessionID_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 9;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceCreatedSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceCreatedSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (ParentID != other.ParentID) return false;
      if (Type != other.Type) return false;
      if (Time != other.Time) return false;
      if (Duration != other.Duration) return false;
      if (Path != other.Path) return false;
      if (SessionID != other.SessionID) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0UL) hash ^= ID.GetHashCode();
      if (ParentID != 0UL) hash ^= ParentID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (Duration != 0UL) hash ^= Duration.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (SessionID != 0UL) hash ^= SessionID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ID);
      }
      if (ParentID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ParentID);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      if (Time != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Time);
      }
      if (Duration != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Duration);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Path);
      }
      if (SessionID != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(SessionID);
      }
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (ParentID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ParentID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (Duration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Duration);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (SessionID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceCreatedSignal other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      if (other.ParentID != 0UL) {
        ParentID = other.ParentID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.Duration != 0UL) {
        Duration = other.Duration;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.SessionID != 0UL) {
        SessionID = other.SessionID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt64();
            break;
          }
          case 16: {
            ParentID = input.ReadUInt64();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
          case 32: {
            Time = input.ReadUInt64();
            break;
          }
          case 40: {
            Duration = input.ReadUInt64();
            break;
          }
          case 50: {
            Path = input.ReadString();
            break;
          }
          case 64: {
            SessionID = input.ReadUInt64();
            break;
          }
          case 72: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndpointDoneSignal : pb::IMessage<EndpointDoneSignal> {
    private static readonly pb::MessageParser<EndpointDoneSignal> _parser = new pb::MessageParser<EndpointDoneSignal>(() => new EndpointDoneSignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndpointDoneSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::scyna.proto.TraceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndpointDoneSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndpointDoneSignal(EndpointDoneSignal other) : this() {
      traceID_ = other.traceID_;
      status_ = other.status_;
      response_ = other.response_;
      request_ = other.request_;
      sessionID_ = other.sessionID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndpointDoneSignal Clone() {
      return new EndpointDoneSignal(this);
    }

    /// <summary>Field number for the "TraceID" field.</summary>
    public const int TraceIDFieldNumber = 1;
    private ulong traceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TraceID {
      get { return traceID_; }
      set {
        traceID_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "Response" field.</summary>
    public const int ResponseFieldNumber = 3;
    private string response_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Request" field.</summary>
    public const int RequestFieldNumber = 4;
    private string request_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Request {
      get { return request_; }
      set {
        request_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SessionID" field.</summary>
    public const int SessionIDFieldNumber = 5;
    private ulong sessionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionID {
      get { return sessionID_; }
      set {
        sessionID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndpointDoneSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndpointDoneSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceID != other.TraceID) return false;
      if (Status != other.Status) return false;
      if (Response != other.Response) return false;
      if (Request != other.Request) return false;
      if (SessionID != other.SessionID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceID != 0UL) hash ^= TraceID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Response.Length != 0) hash ^= Response.GetHashCode();
      if (Request.Length != 0) hash ^= Request.GetHashCode();
      if (SessionID != 0UL) hash ^= SessionID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TraceID);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Response.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Response);
      }
      if (Request.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Request);
      }
      if (SessionID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SessionID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TraceID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      if (Request.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Request);
      }
      if (SessionID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndpointDoneSignal other) {
      if (other == null) {
        return;
      }
      if (other.TraceID != 0UL) {
        TraceID = other.TraceID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Response.Length != 0) {
        Response = other.Response;
      }
      if (other.Request.Length != 0) {
        Request = other.Request;
      }
      if (other.SessionID != 0UL) {
        SessionID = other.SessionID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TraceID = input.ReadUInt64();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            Response = input.ReadString();
            break;
          }
          case 34: {
            Request = input.ReadString();
            break;
          }
          case 40: {
            SessionID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
